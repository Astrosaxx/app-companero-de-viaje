#!/usr/bin/env python3
"""
Script de instalaci√≥n autom√°tica para Compa√±ero de Viaje
"""

import os
import sys
import subprocess
from pathlib import Path

def run_command(command, description):
    """Ejecuta un comando y muestra el resultado"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} completado")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en {description}: {e.stderr}")
        return False

def check_python_version():
    """Verifica la versi√≥n de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Se requiere Python 3.8 o superior")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version.split()[0]} detectado")

def create_env_file():
    """Crea el archivo .env si no existe"""
    env_file = Path(".env")
    if not env_file.exists():
        print("üìù Creando archivo .env...")
        env_content = """# Configuraci√≥n de Base de Datos
MYSQL_DB=compa√±ero_de_viaje_db
MYSQL_USER=root
MYSQL_PASSWORD=tu_contrase√±a_mysql
MYSQL_HOST=localhost
MYSQL_PORT=3306

# Configuraci√≥n de Seguridad
SECRET_KEY=clave_super_secreta_para_sesiones_12345

# Configuraci√≥n de Desarrollo
FLASK_ENV=development
FLASK_DEBUG=True
"""
        with open(".env", "w", encoding="utf-8") as f:
            f.write(env_content)
        print("‚úÖ Archivo .env creado")
        print("‚ö†Ô∏è  IMPORTANTE: Edita el archivo .env con tus credenciales de MySQL")
    else:
        print("‚úÖ Archivo .env ya existe")

def install_dependencies():
    """Instala las dependencias de Python"""
    if not run_command("pip install -r requirements.txt", "Instalando dependencias"):
        return False
    return True

def setup_database():
    """Configura la base de datos"""
    print("üóÑÔ∏è Configurando base de datos...")
    
    # Importar despu√©s de instalar dependencias
    try:
        from app.config.mysqlconnection import connectToMySQL
        from dotenv import load_dotenv
        
        load_dotenv()
        db = os.getenv("MYSQL_DB")
        
        # Insertar roles b√°sicos
        roles = [(1, 'Organizador'), (2, 'Participante')]
        for rol_id, nombre in roles:
            query = "INSERT IGNORE INTO roles_viaje (id, nombre) VALUES (%s, %s);"
            connectToMySQL(db).query_db(query, (rol_id, nombre))
            print(f"‚úÖ Rol '{nombre}' insertado")
        
        print("‚úÖ Base de datos configurada correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error configurando base de datos: {e}")
        print("üí° Aseg√∫rate de que MySQL est√© ejecut√°ndose y las credenciales sean correctas")
        return False

def main():
    """Funci√≥n principal de instalaci√≥n"""
    print("üöÄ Instalando Compa√±ero de Viaje...")
    print("=" * 50)
    
    # Verificar Python
    check_python_version()
    
    # Crear archivo .env
    create_env_file()
    
    # Instalar dependencias
    if not install_dependencies():
        print("‚ùå Error instalando dependencias")
        sys.exit(1)
    
    # Configurar base de datos
    if not setup_database():
        print("‚ö†Ô∏è  Error configurando base de datos")
        print("üí° Puedes ejecutar manualmente: python setup_database.py")
    
    print("=" * 50)
    print("üéâ ¬°Instalaci√≥n completada!")
    print("")
    print("üìã Pr√≥ximos pasos:")
    print("1. Edita el archivo .env con tus credenciales de MySQL")
    print("2. Ejecuta: python server.py")
    print("3. Abre tu navegador en: http://127.0.0.1:5014")
    print("")
    print("üõ´ ¬°Disfruta planificando tus viajes!")

if __name__ == "__main__":
    main()
